name: Deploy React App

on:
  push:
    branches:
      - main  # Change if using a different branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # Ensure compatibility with your dependencies

      - name: Debug Node Environment
        run: |
          echo "Node Version: $(node -v)"
          echo "NPM Version: $(npm -v)"

      - name: Clean Install Dependencies
        run: npm ci  # Ensures a clean install

      - name: Install Webpack Polyfills
        run: npm install node-polyfill-webpack-plugin net-browserify stream-http path-browserify querystring-es3 crypto-browserify stream-browserify browserify-zlib vm-browserify --save-dev

      - name: Inject Webpack Polyfill Overrides
        run: |
          echo "module.exports = function override(config) { 
            config.resolve.fallback = { 
              net: require.resolve('net-browserify'), 
              http: require.resolve('stream-http'), 
              path: require.resolve('path-browserify'), 
              querystring: require.resolve('querystring-es3'), 
              fs: false, 
              crypto: require.resolve('crypto-browserify'), 
              stream: require.resolve('stream-browserify'), 
              zlib: require.resolve('browserify-zlib'), 
              vm: require.resolve('vm-browserify'), 
              async_hooks: false, 
            };
            config.ignoreWarnings = [/Critical dependency:/];  // Suppresses dynamic require warnings
            return config; 
          };" > ./config-overrides.js

      - name: Install React App Rewired
        run: npm install react-app-rewired --save-dev

      - name: Build React App with Overrides
        run: npx react-app-rewired build
        env:
          NODE_OPTIONS: --openssl-legacy-provider  # Fixes potential OpenSSL issues in some Node.js versions
          CI: false  # Prevents treating warnings as errors

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Remote Server
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf /var/www/html/*"
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r build/* $SERVER_USER@$SERVER_HOST:/var/www/html/

    zap-scan:
    runs-on: ubuntu-latest

    steps:
        - name: Start OWASP ZAP
        uses: zaproxy/action-full-scan@v1
        with:
            target: 'http://${{ secrets.SERVER_HOST }}/' # Replace with your deployed app URL
            args: '-d' # Enable debug mode for ZAP
